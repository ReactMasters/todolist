# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type TodoItem {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  content: String!
  status: TodoStatus!
  tags: [Tag!]!
  dueDateTime: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum TodoStatus {
  IN_PROGRESS
  COMPLETED
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  email: String!
  lastLoginAt: DateTime
}

type TodoList {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  name: String!
  todos: [TodoItem!]!
  owners: [User!]!
}

type Tag {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  name: String!
  owner: User!
}

type CreateTagOutput {
  success: Boolean!
  message: String
  tag: Tag
}

type ListTagsOutput {
  success: Boolean!
  message: String
  tags: [Tag!]!
}

type CreateTodoListOutput {
  success: Boolean!
  message: String
  todoList: TodoList!
}

type Query {
  me: MeOutput!
  users: [User!]!
  user(id: String!): User!
  listTags: ListTagsOutput!
  findTodoList(findTodoListInput: FindTodoListInput!): FindTodoListOutput!
}

union MeOutput = MeSuccess | MeError

type MeSuccess {
  user: User!
}

type MeError {
  message: String!
}

union FindTodoListOutput = FindTodoListSuccess | FindTodoListError

type FindTodoListSuccess {
  todoList: TodoList
  tags: [Tag!]!
}

type FindTodoListError {
  message: String!
}

input FindTodoListInput {
  id: String!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): CreateUserOutput!
  login(loginInput: LoginInput!): LoginOutput!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: String!): User!
  createTag(createTagInput: CreateTagInput!): CreateTagOutput!
  createTodoItem(createTodoItemInput: CreateTodoItemInput!): CreateTodoItemOutput!
  createTodoList(createTodoListInput: CreateTodoListInput!): CreateTodoListOutput!
}

union CreateUserOutput = CreateUserSuccess | CreateUserError

type CreateUserSuccess {
  user: User!

  """JWT when create user success"""
  token: String!
  todoList: TodoList!
}

type CreateUserError {
  message: String!
}

input CreateUserInput {
  """user email"""
  email: String!

  """user password"""
  password: String!
}

union LoginOutput = LoginSuccess | LoginError

type LoginSuccess {
  token: String!
}

type LoginError {
  message: String!
}

input LoginInput {
  """user email"""
  email: String!

  """user password"""
  password: String!
}

input UpdateUserInput {
  email: String

  """user password"""
  password: String
  id: String!
}

input CreateTagInput {
  name: String!
}

union CreateTodoItemOutput = CreateTodoItemSuccess | CreateTodoItemError

type CreateTodoItemSuccess {
  todoItem: TodoItem!
}

type CreateTodoItemError {
  message: String!
}

input CreateTodoItemInput {
  todoListId: String!
  content: String!
  status: String
  dueDateTime: DateTime
}

input CreateTodoListInput {
  name: String!
  owners: [String!]!
}
