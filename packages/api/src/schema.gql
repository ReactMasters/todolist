# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  email: String!
  lastLoginAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Tag {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  name: String!
  owner: User!
}

type AddTagOutput {
  success: Boolean!
  message: String
  tag: Tag
}

type ListTagsOutput {
  success: Boolean!
  message: String
  tags: [Tag!]!
}

type TodoItem {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  content: String!
  status: TodoStatus!
  tags: [Tag!]!
  dueDateTime: DateTime
  todoList: TodoList!
}

enum TodoStatus {
  IN_PROGRESS
  COMPLETED
}

type TodoList {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  name: String!
  todos: [TodoItem!]!
  owners: [User!]!
}

type AddTodoListOutput {
  success: Boolean!
  message: String
  todoList: TodoList!
}

type Query {
  me: MeOutput!
  users: [User!]!
  user(id: String!): User!
  listTags: ListTagsOutput!
  todoItems(todoItemsInput: TodoItemsInput!): TodoItemsOutput!
  todoItem(id: String!): TodoItem
  findTodoList(findTodoListInput: FindTodoListInput!): FindTodoListOutput!
  myTodoLists: MyTodoListsOutput!
}

union MeOutput = MeSuccess | MeError

type MeSuccess {
  user: User!
}

type MeError {
  message: String!
}

union TodoItemsOutput = TodoItemsSuccess | TodoItemsError

type TodoItemsSuccess {
  totalCount: Int!
  items: [TodoItem!]!
}

type TodoItemsError {
  message: String!
}

input TodoItemsInput {
  todoListId: ID!
  tagIds: [ID!] = []
}

union FindTodoListOutput = FindTodoListSuccess | FindTodoListError

type FindTodoListSuccess {
  todoList: TodoList
  tags: [Tag!]!
}

type FindTodoListError {
  message: String!
}

input FindTodoListInput {
  id: String!
}

union MyTodoListsOutput = MyTodoListsSuccess | MyTodoListsError

type MyTodoListsSuccess {
  todoLists: [TodoList!]
}

type MyTodoListsError {
  message: String!
}

type Mutation {
  signup(signupInput: SignupInput!): SignupOutput!
  signin(signinInput: SigninInput!): SigninOutput!
  addTag(addTagInput: AddTagInput!): AddTagOutput!
  addTodoItem(addTodoItemInput: AddTodoItemInput!): AddTodoItemOutput!
  addTodoList(addTodoListInput: AddTodoListInput!): AddTodoListOutput!
}

union SignupOutput = SignupSuccess | SignupError

type SignupSuccess {
  user: User!

  """JWT when create user success"""
  token: String!
  todoList: TodoList!
}

type SignupError {
  message: String!
}

input SignupInput {
  """user email"""
  email: String!

  """user password"""
  password: String!
}

union SigninOutput = SigninSuccess | SigninError

type SigninSuccess {
  token: String!
}

type SigninError {
  message: String!
}

input SigninInput {
  """user email"""
  email: String!

  """user password"""
  password: String!
}

input AddTagInput {
  name: String!
}

union AddTodoItemOutput = AddTodoItemSuccess | AddTodoItemError

type AddTodoItemSuccess {
  todoItem: TodoItem!
}

type AddTodoItemError {
  message: String!
}

input AddTodoItemInput {
  todoListId: String!
  content: String!
  status: String
  dueDateTime: DateTime
}

input AddTodoListInput {
  name: String!
  owners: [String!]!
}
